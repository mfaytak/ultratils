#!/usr/bin/env python

# Convert .bpr file to .bmp.

import os, sys, os.path, fnmatch
import getopt
import numpy as np
import ultratils.pysonix.bprreader
import ultratils.pysonix.probe
import ultratils.pysonix.scanconvert

try:  # Python 2
    import Image
except ImportError:  # Python 3
    from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import datetime
import time
import hashlib

VERSION = '0.2.1'
Verbose = False

standard_usage_str = """bpr2bmp --probe|-p id [optional args] file1.bpr [fileN.bpr...]           # file mode

    bpr2bmp --probe|-p id [optional args] --seek dir1 [dirN...]    # seek mode

Optional arguments:

  --force
    Overwrite existing .bmp files in seek mode.

  --verbose
    Display verbose messages.

  --no-index-file
    Do not look for a '.idx.txt' index file for numbering bmp.

  --no-deduplicate
    Do not look for and remove duplicate frames.
"""

ver_usage_str = 'bpr2bmp --version|-v'
help_usage_str = 'bpr2bmp --help|-h'

def usage():
    print('\n' + standard_usage_str)
    print('\n' + ver_usage_str)
    print('\n' + help_usage_str)

def version():
    print("""
bpr2bmp Version %s
""" % (VERSION))

def help():
    print("""
bpr2bmp - Convert pre scan-converted B-mode (.bpr) ultrasound data to bitmaps

bpr2bmp reads from .bpr files and saves the individual frames to indexed
bitmaps, starting at '0'.

Usage:

    %s

    %s

    %s

In file mode the program operates on one or more .bpr file command line
arguments. Output files are created in the same directory as the .bpr
files and have the same name as the input file with the .bpr suffix
replaced with '.N.bmp', where N is a frame index. If any .bmp files already
exist with the same name they will be overwritten.

In seek mode the program scans one or more directories for .bpr files and
operates on each one it finds. If it does not find a '.0.bmp' file that
corresponds to the .bpr then it extracts bitmaps from the .bpr. If it does
find a corresponding '.0.bmp' file then it skips processing that .bpr. Use
--force to prevent skipping and to overwrite existing .bmp files in seek
mode.

Frame indexes are drawn from the <name>.bpr.idx.txt file, and blank
frames are created for frames that failed to be captured. If the
--no-index-file option is used, then frame indexes for .bmp files are
created sequentially, and no detection of skipped frames will occur.

Duplicate frames in the .bpr are ignored and no .bmp file corresponds to
these frames. If you want to produce duplicate .bmp files, use the
--no-deduplicate parameter.

Use --verbose to turn on status messages as .bpr files are processed.
""" % (standard_usage_str, ver_usage_str, help_usage_str))

def bitmap_for_bpr_exists(bpr):
    """Return true if one or more bitmap files exist for a .bpr file."""
    return os.path.isfile(os.path.splitext(bpr)[0] + '.0.bmp')

def convert_to_bmp(bpr, probe, auto_index=False, deduplicate=True):
    """Convert the frames in a bpr file to bitmaps."""
    barename = os.path.splitext(bpr)[0]   # get filename without extension
    bprreader = ultratils.pysonix.bprreader.BprReader(bpr)
    header = bprreader.header
    converter = ultratils.pysonix.scanconvert.Converter(header, probe)

    if not auto_index:
        idxfile = "{}.idx.txt".format(bpr)
        indexes = np.loadtxt(idxfile, dtype=int)
        # Create a gray image as a skipped frame filler.
        blankbpr = converter.default_bpr_frame(0)
        blank = converter.as_bmp(blankbpr).astype(np.uint8)
        blank = Image.fromarray(np.flipud(blank))
        last_frame = -1

    start = time.time()
    lasttime = start
    lastcnt = -1
    if deduplicate:
        fhashes = {}
    for idx,bprdata in enumerate(bprreader):
        data = np.flipud(converter.as_bmp(bprdata))
        if deduplicate:
            h = hashlib.sha1(data.copy(order="c")).hexdigest()
            if h in fhashes.keys():
                if Verbose:
                    msg = "Frame {:d} is a duplicate of {:d}. Skipping.\n".format(idx, fhashes[h])
                    sys.stderr.write(msg)
                continue
            fhashes[h] = idx
        frame = Image.fromarray(data.astype(np.uint8))
        if auto_index:
            frame.save("{:s}.{:d}.bmp".format(barename, idx))
        else:
            for n in range(indexes[idx] - last_frame - 1):
                last_frame += 1
                blank.save("{:s}.{:d}.bmp".format(barename, last_frame))
            last_frame += 1
            frame.save("{:s}.{:d}.bmp".format(barename, last_frame))
#        if (idx-1) % 100 == 0:
#            proc = idx - lastcnt
#            lastcnt += 100
#            mytime = time.time()
#            cumdur = mytime - start
#            insdur = mytime - lasttime
#            lasttime = mytime
#            print "{:d} frames. Inst {:0.4f} ({:0.4f} s/f); Cum {:0.4f} ({:0.4f} s/f)".format(idx+1,insdur,insdur/100.0,cumdur,cumdur/(idx+1))

if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], "p:h:v", ["probe=", "help", "version", "seek", "verbose", "force", "no-index-file", "no-deduplicate"])
    except getopt.GetoptError as err:
        print(str(err))
        usage()
        sys.exit(2)
    seekmode = False
    force = False
    probe = None
    auto_index = False
    deduplicate = True
    for o, a in opts:
        if o in ("-p", "--probe"):
            probe = ultratils.pysonix.probe.Probe(a)
        elif o in ('-h', '--help'):
            help()
            sys.exit(0)
        elif o in ('-v', '--version'):
            version()
            sys.exit(0)
        elif o == '--seek':
            seekmode = True
        elif o == '--verbose':
            Verbose = True
        elif o == '--force':
            force = True
        elif o == '--no-index-file':
            auto_index = True
        elif o == '--no-deduplicate':
            deduplicate = False
    if len(args) == 0 or (probe == None):
        usage()
        sys.exit(2)

    if Verbose:
        print("Starting at: ", datetime.datetime.now().time())
    for fname in args:
        if seekmode:
            bprlist = []
            for root, dirnames, filenames in os.walk(fname):
                for filename in fnmatch.filter(filenames, '*.bpr'):
                    bprlist.append(os.path.join(root, filename))
            for bpr in bprlist:
                if force or not bitmap_for_bpr_exists(bpr):
                    if Verbose:
                        sys.stderr.write("Creating bitmaps for {:s}.\n".format(bpr))
                    try:
                        convert_to_bmp(bpr, probe, auto_index, deduplicate)
                    except Exception as e:
                        sys.stderr.write("Error in converting {:s}. Skipping.\n".format(bpr))
                else:
                    if Verbose:
                        sys.stderr.write("Skipping {:s}. Bitmap already exists.\n".format(bpr))
        else:
            if Verbose:
                sys.stderr.write("Creating bitmaps for {:s}.\n".format(fname))

#            try:
            convert_to_bmp(fname, probe, auto_index, deduplicate)
#            except Exception as e:
#                sys.stderr.write("Error in converting {:s}: {:s}.\n".format(fname, e))

    if Verbose:
        print("Ending at: ", datetime.datetime.now().time())

