#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''Detect ultrasound synchronization signal unit in a .wav file.'''

import os, sys, fnmatch
import getopt
from datetime import datetime
import ultratils.psync

VERSION = '0.2.0'

standard_usage_str = """psync --channel channel [optional args] file1.wav [fileN.wav...]           # file mode

    psync --channel channel [optional args] --seek dir1 [dirN...]    # seek mode

Required arguments (file mode only):

  --channel
    Index of channel in .wav file where synchronization signal is found.
    Use 0 for the first channel and 1 for the second.

    When --seek is used, channel 1 (second channel) is assumed. This assumption will
    be overridden if --channel is provided.

Optional arguments:

  --force
    Overwrite existing .sync.txt files in seek mode.

  --verbose
    Display verbose messages.

  --algorithm='impulse' (default) | 'pstretch'
    Name of the algorithm used to detect the sync signal. The 'impulse'
    algorithm detects the peak of an impulse and is the default if this
    parameter is not provided. The 'pstretch' algorithm is suitable for
    impulse signals that have been lengthened by the pstretch hardware unit.

  --received_indexes=index_file
    An index file containing the data frames actually received for each
    synchronization pulse. The format of this file is a single column of
    zero-based index numbers, one index per line and in strictly increasing
    order. If this file is provided, then the output textgrid will contain
    a second tier named 'raw_data_index' to indicate the data frame where
    the raw data corresponding to a sync pulse is expected to be found.

    Use of --received_indexes implies --raw-data-index.

  --raw-data-index (default)
    Produce the raw_data_index tier/column in the output, which contains the
    indexes of data frames that were received during acquisition. Use the file
    named by --received_indexes for the list of acquired frames. If no filename
    is supplied, attempt to find the indexes in a file with the same basename
    as the .wav file and with a '.idx.txt' extension.

  --no-raw-data-index
    Do not produce the raw_data_index tier/column in the output.

  --summary
    Output a summary of sync pulses found to STDERR.
"""

ver_usage_str = 'sepchan --version|-v'
help_usage_str = 'sepchan --help|-h'

def usage():
    print('\n' + standard_usage_str)
    print('\n' + ver_usage_str)
    print('\n' + help_usage_str)

def version():
    print("""
sepchan Version %s
""" % (VERSION))

def help():
    print("""
psync - Read synchronization signal from a .wav file and output a .sync.txt file.

psync reads audio data from a .wav file, finds synchronization pulses, and
outputs a text file of zero-based index numbers and corresponding times.

Usage:

    %s

    %s

    %s

In file mode the program operates on one or more .wav file command line
arguments. Output files are created in the same directory as the .wav
files and have the same basename as the input file with a .sync.txt suffix.
If any .sync.txt files already exist with the same names they will be
overwritten.

In seek mode the program scans one or more directories for *.bpr files and
operates on corresponding *.bpr.wav files. If it does not find a '.sync.txt'
file that corresponds to the .bpr then it performs a synchronization. If it does
find a corresponding '.sync.txt' file then it skips processing that .bpr. Use
--force to prevent skipping and to overwrite existing .sync.txt files in seek
mode.

In seek mode the *.bpr.wav files are assumed to be two-channel audio files
with the synchronization signal in channel 1 (the second channel).

Use --verbose to turn on status messages as .wav files are processed.
""" % (standard_usage_str, ver_usage_str, help_usage_str))

if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], "c:h:v", ["channel=", "help", "version", "seek", "verbose", "force", "raw-data-index", "no-raw-data-index", "summary", "algorithm=", "received_indexes="])
    except getopt.GetoptError as err:
        print(str(err))
        usage()
        sys.exit(2)
    channel = None
    seekmode = False
    verbose = False
    force = False
    algorithm = 'impulse'
    received_indexes = None
    raw_data_index = True
    summary = False
    for o, a in opts:
        if o in ('-c', '--channel'):
            channel = a
        elif o in ('-h', '--help'):
            help()
            sys.exit(0)
        elif o in ('-v', '--version'):
            version()
            sys.exit(0)
        elif o == '--seek':
            seekmode = True
        elif o == '--verbose':
            verbose = True
        elif o == '--force':
            force = True
        elif o == '--raw-data-index':
            raw_data_index = True
        elif o == '--no-raw-data-index':
            raw_data_index = False
        elif o == '--summary':
            summary = True
        elif o == '--algorithm':
            algorithm = a
        elif o == '--received_indexes':
            received_indexes = a
            raw_data_index = True
    if len(args) == 0 or (channel is None and seekmode is False):
        usage()
        sys.exit(2)

    if verbose:
        print("Starting at: ", datetime.now().time())
    for fname in args:
        if seekmode:
            if channel is None:
                channel = 1
            for root, dirnames, filenames in os.walk(fname):
                for filename in filenames:
                    if filename.lower().endswith(('.bpr', '.raw')):
                        usname = os.path.join(root, filename)
                        shortname = os.path.splitext(usname)[0]
                        try: # check for no-sandwich filename
                            with open(shortname + '.wav') as wfile: # TODO
                                pass
                        except IOError as e: # use sandwich filename
                            if verbose:
                                print("No short filename {}; using long filename\n".format(shortname + '.wav'))
                            basename = usname 
                        else: # use no-sandwich filename
                            basename = shortname
                        wav = basename + '.wav'
                        if os.path.isfile(basename + '.sync.txt') and force is False:
                            if verbose:
                                sys.stderr.write("Skipping {:s}.\n".format(wav))
                            continue
                        if verbose:
                            sys.stderr.write("Creating sync file for {:s}.\n".format(wav))
                        try:
                            idxfile = received_indexes
                            if raw_data_index is True and idxfile is None:
                                idxfile = "{}.idx.txt".format(basename)
                            ultratils.psync.sync2text(wav, chan=channel, algorithm=algorithm, outbasename=basename, received_indexes=idxfile, summary=summary)
                        except Exception as e:
                            print(e)
                            sys.stderr.write("Error creating sync file for {:s}. Skipping.\n".format(wav))
        else:
            if verbose:
                sys.stderr.write("Creating sync file for {:s}.\n".format(fname))
            idxfile = received_indexes
            if raw_data_index is True and idxfile is None:
                idxfile = os.path.splitext(fname)[0] + '.idx.txt'
            outbasename = fname.replace('.ch1.wav', '').replace('.ch2.wav','').replace('.wav','')
            ultratils.psync.sync2text(fname, chan=channel, algorithm=algorithm, outbasename=outbasename, received_indexes=idxfile, summary=summary)

    if verbose:
        print("Ending at: ", datetime.now().time())
